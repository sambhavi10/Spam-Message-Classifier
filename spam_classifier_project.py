# -*- coding: utf-8 -*-
"""Spam_classifier_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12BM2ZEB6XO8zasgM65D6xIKt2CtkmCET
"""

import pandas as pd

messages = pd.read_csv('SMSSpamCollection', sep = '\t',names = ["label","message"])

messages

import nltk
nltk.download("popular")
nltk.download('wordnet')
nltk.download('punkt')
nltk.download('stopwords')

"""### Using Stemming"""

import re 
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from nltk.stem import PorterStemmer 

wordnet = WordNetLemmatizer()
ps = PorterStemmer()

#we already have sentences
corpus = []

for i in range(len(messages)):
  review = re.sub('[^a-zA-Z]',' ', messages['message'][i]) #traversing through the message column
  review = review.lower()
  review = review.split() #split into words
  review = [ps.stem(word) for word in review if not word in stopwords.words('english')] 
  review = ' '.join(review)
  corpus.append(review)

corpus

"""## Converting into Bag Of Words Model"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 5000) 
#here we should not select all the columns, but we should select only frequent columns
#because there are 6296 words(no of columns), 
#taking 5000 most frequent words now

X = cv.fit_transform(corpus).toarray()
X

#our output is either 'Spam' or 'Ham'
#so we need to convert that into numbers
y = pd.get_dummies(messages['label'])

#y.head()

y = y.iloc[:,1].values
#dummy trap, taking only spam column
y

"""### Train Test Split"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state = 9)

len(X_train)

len(X_test)

len(X) #train+test

"""### Naive Bayes Classifier"""

from sklearn.naive_bayes import MultinomialNB
model = spam_detect_model = MultinomialNB()
model.fit(X_train,y_train)

y_pred = model.predict(X_test)

y_pred

"""### Comparing y_pred and y_test"""

from sklearn.metrics import confusion_matrix,accuracy_score
cm = confusion_matrix(y_test,y_pred)
cm

acc = accuracy_score(y_test,y_pred)
acc

